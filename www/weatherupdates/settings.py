"""
Django settings for weatherupdates project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import sys, os
sys.path.append('../')
from config import localconfig as weatherUpdatesConfig
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

SECRET_KEY = weatherUpdatesConfig.wwwConfig['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = weatherUpdatesConfig.wwwConfig['IS_DEBUG']

ALLOWED_HOSTS = weatherUpdatesConfig.wwwConfig['ALLOWED_HOSTS']

LOG_LOCATION = weatherUpdatesConfig.wwwConfig['LOG_LOCATION']

LOGGING = {
	'version': 1,
	'disable_existing_loggers': False,
	'formatters': {
		'standard': {
			'format': '%(asctime)s [LOG] %(funcName)s %(name)s: %(message)s',
		},
	},
	'handlers': {
		'weatherUpdates': {
			'level':'DEBUG',
			'class':'logging.handlers.RotatingFileHandler',
			'filename': LOG_LOCATION + 'weatherUpdates.log',
			'maxBytes': 1024*1024*10, # 50 MB
			'formatter':'standard',
		},
	},
	'loggers': {
		'': {
			'handlers': ['weatherUpdates'],
			'level': 'INFO',
			'propagate': True
		},
		'django.request': {
			'handlers': ['weatherUpdates'],
			'level': 'INFO',
			'propagate': True,
		},
		'django': {
            'handlers': ['weatherUpdates'],
			'level': 'INFO',
            'propagate': True,
        },
	}
}

if DEBUG:
	LOGGING['handlers']['console'] = {
		'level': 'DEBUG',
		'class': 'logging.StreamHandler',
		'stream': sys.stdout
	}
	LOGGING['loggers']['']['handlers'].append('console')
	LOGGING['loggers']['django.request']['handlers'].append('console')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #3rd party
    'rest_framework',
    #created apps
	'apps.weather_api'
]

if DEBUG:
	INSTALLED_APPS.append('corsheaders')

CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOWED_ORIGINS = ["http://localhost:3000/"]

CELERY_BROKER_URL = weatherUpdatesConfig.wwwConfig['CELERY_BROKER_URL']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'weatherupdates.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'weatherupdates.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.postgresql',
		'NAME': weatherUpdatesConfig.dbConfig['DB_NAME'],
		'USER': weatherUpdatesConfig.dbConfig['DB_USER'],
		'HOST': weatherUpdatesConfig.dbConfig['DB_HOST'],
		'PASSWORD': weatherUpdatesConfig.dbConfig['DB_PASSWORD'],
		'PORT': weatherUpdatesConfig.dbConfig['DB_PORT'],
	}
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

# CACHES = {
#     'default': {
#         'BACKEND': 'django_redis.cache.RedisCache',
#         'LOCATION': 'redis://127.0.0.1:6379/',
#         'OPTIONS': {
#             'CLIENT_CLASS': 'django_redis.client.DefaultClient',
#         }
#     }
# }

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
STATIC_URL = weatherUpdatesConfig.wwwConfig['STATIC_URL']
STATIC_ROOT = weatherUpdatesConfig.wwwConfig['STATIC_ROOT']
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, "static"),
)
FIXTURE_DIRS = (
	os.path.join(BASE_DIR, 'custom/fixtures/'),
)